---
name: Build and Release ODR Artifacts

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  ##################################
  # Build Jobs
  ##################################
  build_padenc:
    name: Build ODR-PadEnc Artifact
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: debian13
            image: "debian:trixie-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: debian13
            image: "debian:trixie-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: ubuntu
            image: "ubuntu:24.04"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: ubuntu
            image: "ubuntu:24.04"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: alpine
            image: "alpine:3.21"
            arch: "amd64"
            runner: "ubuntu-24.04"
    steps:
      - name: Checkout repository (for build.env file)
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            build.env
          sparse-checkout-cone-mode: false

      - name: Load configuration
        run: |
          # Source build.env file
          set -a
          . ./build.env
          set +a

          # Export to environment
          {
            echo "VERSION=$ODR_PADENC_VERSION"
            echo "BRANCH=$ODR_PADENC_BRANCH"
            echo "URL_BASE=https://github.com/Opendigitalradio"
            echo "SOFTWARE=ODR-PadEnc"
          } >> "$GITHUB_ENV"

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "alpine" ]; then
            apk add --no-cache \
              build-base automake autoconf libtool \
              imagemagick-dev \
              curl git
          else
            apt-get update && apt-get install -y --no-install-recommends \
              build-essential automake libtool \
              libmagickwand-dev \
              ca-certificates curl git && \
            apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          fi

      - name: Download or clone ODR-PadEnc
        run: |
          # Check if BRANCH starts with 'v' (indicating a version tag)
          if [[ "${BRANCH}" =~ ^v[0-9] ]]; then
            echo "Downloading tag ${BRANCH}"
            curl -L "${URL_BASE}/${SOFTWARE}/archive/refs/tags/${BRANCH}.tar.gz" | tar -xz
            mv ODR-PadEnc-* ODR-PadEnc
          else
            echo "Cloning branch ${BRANCH}"
            git clone --depth 1 --branch "${BRANCH}" "${URL_BASE}/${SOFTWARE}.git"
          fi

      - name: Build ODR-PadEnc
        working-directory: ODR-PadEnc
        run: |
          ./bootstrap
          ./configure
          make -j"$(nproc)"

      - name: Prepare output directory
        run: mkdir -p output

      - name: Copy built binary to output directory
        working-directory: ODR-PadEnc
        run: |
          BINARY_NAME="odr-padenc-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ -f odr-padenc ]; then
            cp odr-padenc "../output/$BINARY_NAME"
          elif [ -f src/odr-padenc ]; then
            cp src/odr-padenc "../output/$BINARY_NAME"
          else
            echo "Build failed: executable not found!" && exit 1
          fi

      - name: Upload ODR-PadEnc Artifact
        uses: actions/upload-artifact@v4
        with:
          name: odr-padenc-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}
          path: output/odr-padenc-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}

  build_audioenc:
    name: Build ODR-AudioEnc Artifact
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: full
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: minimal
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: full
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: minimal
          - os: debian13
            image: "debian:trixie-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: full
          - os: debian13
            image: "debian:trixie-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: minimal
          - os: debian13
            image: "debian:trixie-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: full
          - os: debian13
            image: "debian:trixie-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: minimal
          - os: ubuntu
            image: "ubuntu:24.04"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: full
          - os: ubuntu
            image: "ubuntu:24.04"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: minimal
          - os: ubuntu
            image: "ubuntu:24.04"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: full
          - os: ubuntu
            image: "ubuntu:24.04"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: minimal
          - os: alpine
            image: "alpine:3.21"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: minimal
          - os: alpine
            image: "alpine:3.21"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: full
    steps:
      - name: Checkout repository (for build.env file)
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            build.env
          sparse-checkout-cone-mode: false

      - name: Load configuration
        run: |
          # Source build.env file
          set -a
          . ./build.env
          set +a

          # Export to environment
          {
            echo "VERSION=$ODR_AUDIOENC_VERSION"
            echo "BRANCH=$ODR_AUDIOENC_BRANCH"
            echo "URL_BASE=https://github.com/Opendigitalradio"
            echo "SOFTWARE=ODR-AudioEnc"
          } >> "$GITHUB_ENV"

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "alpine" ]; then
            # Enable community repository
            echo "https://dl-cdn.alpinelinux.org/alpine/v3.21/community" >> /etc/apk/repositories
            apk update
            apk add --no-cache \
              build-base automake autoconf libtool \
              zeromq-dev \
              alsa-lib-dev jack-dev vlc-dev \
              gstreamer-dev gst-plugins-base-dev \
              curl-dev curl git
          else
            apt-get update && apt-get install -y --no-install-recommends \
              build-essential automake libtool \
              libzmq3-dev libzmq5 \
              libasound2-dev libjack-jackd2-dev libvlc-dev \
              libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
              libcurl4-openssl-dev ca-certificates curl git && \
            apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          fi

      - name: Download or clone ODR-AudioEnc
        run: |
          # Check if BRANCH starts with 'v' (indicating a version tag)
          if [[ "${BRANCH}" =~ ^v[0-9] ]]; then
            echo "Downloading tag ${BRANCH}"
            curl -L "${URL_BASE}/${SOFTWARE}/archive/refs/tags/${BRANCH}.tar.gz" | tar -xz
            mv ODR-AudioEnc-* ODR-AudioEnc
          else
            echo "Cloning branch ${BRANCH}"
            git clone --depth 1 --branch "${BRANCH}" "${URL_BASE}/${SOFTWARE}.git"
          fi

      - name: Build ODR-AudioEnc
        working-directory: ODR-AudioEnc
        run: |
          ./bootstrap
          if [ "${{ matrix.build }}" = "full" ]; then
            ./configure --enable-alsa --enable-jack --enable-vlc --enable-gst
          else
            ./configure
          fi
          make -j"$(nproc)"

      - name: Prepare output directory
        run: mkdir -p output

      - name: Copy built binary to output directory
        working-directory: ODR-AudioEnc
        run: |
          BINARY_NAME="odr-audioenc-${{ env.VERSION }}-${{ matrix.build }}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ -f odr-audioenc ]; then
            cp odr-audioenc "../output/$BINARY_NAME"
          elif [ -f src/odr-audioenc ]; then
            cp src/odr-audioenc "../output/$BINARY_NAME"
          else
            echo "Build failed: executable not found!" && exit 1
          fi

      - name: Upload ODR-AudioEnc Artifact
        uses: actions/upload-artifact@v4
        with:
          name: odr-audioenc-${{ env.VERSION }}-${{ matrix.build }}-${{ matrix.os }}-${{ matrix.arch }}
          path: output/odr-audioenc-${{ env.VERSION }}-${{ matrix.build }}-${{ matrix.os }}-${{ matrix.arch }}

  build_dabmux:
    name: Build ODR-DabMux Artifact
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: debian13
            image: "debian:trixie-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: debian13
            image: "debian:trixie-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: ubuntu
            image: "ubuntu:24.04"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: ubuntu
            image: "ubuntu:24.04"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: alpine
            image: "alpine:3.21"
            arch: "amd64"
            runner: "ubuntu-24.04"
    steps:
      - name: Checkout repository (for build.env file)
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            build.env
          sparse-checkout-cone-mode: false

      - name: Load configuration
        run: |
          # Source build.env file
          set -a
          . ./build.env
          set +a

          # Export to environment
          {
            echo "VERSION=$ODR_DABMUX_VERSION"
            echo "BRANCH=$ODR_DABMUX_BRANCH"
            echo "URL_BASE=https://github.com/Opendigitalradio"
            echo "SOFTWARE=ODR-DabMux"
          } >> "$GITHUB_ENV"

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "alpine" ]; then
            apk add --no-cache \
              build-base automake autoconf libtool \
              zeromq-dev \
              boost-dev \
              curl-dev curl git
          else
            apt-get update && apt-get install -y --no-install-recommends \
              build-essential automake libtool \
              libzmq3-dev libzmq5 \
              libboost-system-dev \
              libcurl4-openssl-dev ca-certificates curl git && \
            apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          fi

      - name: Download or clone ODR-DabMux
        run: |
          # Check if BRANCH starts with 'v' (indicating a version tag)
          if [[ "${BRANCH}" =~ ^v[0-9] ]]; then
            echo "Downloading tag ${BRANCH}"
            curl -L "${URL_BASE}/${SOFTWARE}/archive/refs/tags/${BRANCH}.tar.gz" | tar -xz
            mv ODR-DabMux-* ODR-DabMux
          else
            echo "Cloning branch ${BRANCH}"
            git clone --depth 1 --branch "${BRANCH}" "${URL_BASE}/${SOFTWARE}.git"
          fi

      - name: Build ODR-DabMux
        working-directory: ODR-DabMux
        run: |
          ./bootstrap.sh
          ./configure
          make -j"$(nproc)"

      - name: Prepare output directory
        run: mkdir -p output

      - name: Copy built binary to output directory
        working-directory: ODR-DabMux
        run: |
          BINARY_NAME="odr-dabmux-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ -f odr-dabmux ]; then
            cp odr-dabmux "../output/$BINARY_NAME"
          elif [ -f src/odr-dabmux ]; then
            cp src/odr-dabmux "../output/$BINARY_NAME"
          else
            echo "Build failed: executable not found!" && exit 1
          fi

      - name: Upload ODR-DabMux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: odr-dabmux-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}
          path: output/odr-dabmux-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}

  ##################################
  # Release Jobs
  ##################################
  release_padenc:
    name: Create GitHub Release for ODR-PadEnc
    runs-on: ubuntu-24.04
    needs: build_padenc
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load version
        run: |
          # Source build.env file
          set -a
          . ./build.env
          set +a

          echo "VERSION=$ODR_PADENC_VERSION" >> "$GITHUB_ENV"

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: all_artifacts

      - name: Organize PadEnc artifacts
        run: |
          mkdir -p padenc
          mv all_artifacts/odr-padenc-* padenc/ || true
          ls -l padenc

      - name: Create PadEnc Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          files: padenc/**
          tag_name: odr-padenc-${{ env.VERSION }}
          name: "ODR-PadEnc ${{ env.VERSION }}"
          generate_release_notes: false

  release_audioenc:
    name: Create GitHub Release for ODR-AudioEnc
    runs-on: ubuntu-24.04
    needs: build_audioenc
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load version
        run: |
          # Source build.env file
          set -a
          . ./build.env
          set +a

          echo "VERSION=$ODR_AUDIOENC_VERSION" >> "$GITHUB_ENV"

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: all_artifacts

      - name: Organize AudioEnc artifacts
        run: |
          mkdir -p audioenc
          mv all_artifacts/odr-audioenc-* audioenc/ || true
          ls -l audioenc

      - name: Create AudioEnc Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          files: audioenc/**
          tag_name: odr-audioenc-${{ env.VERSION }}
          name: "ODR-AudioEnc ${{ env.VERSION }}"
          generate_release_notes: false

  release_dabmux:
    name: Create GitHub Release for ODR-DabMux
    runs-on: ubuntu-24.04
    needs: build_dabmux
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load version
        run: |
          # Source build.env file
          set -a
          . ./build.env
          set +a

          echo "VERSION=$ODR_DABMUX_VERSION" >> "$GITHUB_ENV"

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: all_artifacts

      - name: Organize DabMux artifacts
        run: |
          mkdir -p dabmux
          mv all_artifacts/odr-dabmux-* dabmux/ || true
          ls -l dabmux

      - name: Create DabMux Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          files: dabmux/**
          tag_name: odr-dabmux-${{ env.VERSION }}
          name: "ODR-DabMux ${{ env.VERSION }}"
          generate_release_notes: false

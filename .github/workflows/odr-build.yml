---
name: Build and Release ODR Artifacts

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (stable/dev)'
        required: false
        default: 'manual'
        type: choice
        options:
          - manual
          - stable
          - dev
      tools:
        description: 'Tools to build (comma-separated: padenc,audioenc,dabmux or leave empty for all)'
        required: false
        default: ''
      force_version:
        description: 'Force specific version (overrides detection)'
        required: false
        default: ''
      skip_existing:
        description: 'Skip builds if release already exists'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: read

jobs:
  ##################################
  # Configuration Jobs
  ##################################
  determine-builds:
    name: Determine which tools to build
    runs-on: ubuntu-24.04
    outputs:
      build-padenc: ${{ steps.config.outputs.build-padenc }}
      build-audioenc: ${{ steps.config.outputs.build-audioenc }}
      build-dabmux: ${{ steps.config.outputs.build-dabmux }}
      padenc-version: ${{ steps.config.outputs.padenc-version }}
      audioenc-version: ${{ steps.config.outputs.audioenc-version }}
      dabmux-version: ${{ steps.config.outputs.dabmux-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Determine build configuration
        id: config
        run: |
          BUILD_TYPE="${{ inputs.build_type }}"
          TOOLS_INPUT="${{ inputs.tools }}"
          
          # Get versions first
          if [[ "$BUILD_TYPE" == "dev" ]]; then
            # For dev builds, always use "next" as version (rolling release)
            PADENC_VER="next"
            AUDIOENC_VER="next"
            DABMUX_VER="next"
            
            # But get current commit SHAs to check if we need to rebuild
            PADENC_SHA=$(gh api repos/Opendigitalradio/ODR-PadEnc/branches/next --jq '.commit.sha[0:7]')
            AUDIOENC_SHA=$(gh api repos/Opendigitalradio/ODR-AudioEnc/branches/next --jq '.commit.sha[0:7]')
            DABMUX_SHA=$(gh api repos/Opendigitalradio/ODR-DabMux/branches/next --jq '.commit.sha[0:7]')
          else
            # Get latest tags using gh CLI
            PADENC_VER=$(gh release list -R Opendigitalradio/ODR-PadEnc --limit 1 --json tagName --jq '.[0].tagName')
            AUDIOENC_VER=$(gh release list -R Opendigitalradio/ODR-AudioEnc --limit 1 --json tagName --jq '.[0].tagName')
            DABMUX_VER=$(gh release list -R Opendigitalradio/ODR-DabMux --limit 1 --json tagName --jq '.[0].tagName')
          fi
          
          echo "padenc-version=$PADENC_VER" >> "$GITHUB_OUTPUT"
          echo "audioenc-version=$AUDIOENC_VER" >> "$GITHUB_OUTPUT"
          echo "dabmux-version=$DABMUX_VER" >> "$GITHUB_OUTPUT"
          
          SKIP_EXISTING="${{ inputs.skip_existing }}"
          
          # Check if we need to build (only if skip_existing is true)
          if [[ "$SKIP_EXISTING" == "true" ]]; then
            if [[ "$BUILD_TYPE" == "dev" ]]; then
              # For dev builds, check if current commit SHA matches what's in existing release
              PADENC_CURRENT_SHA=$(gh release view "odr-padenc-$PADENC_VER" --json body --jq '.body' 2>/dev/null | grep "Commit:" | cut -d' ' -f2 || echo "none")
              AUDIOENC_CURRENT_SHA=$(gh release view "odr-audioenc-$AUDIOENC_VER" --json body --jq '.body' 2>/dev/null | grep "Commit:" | cut -d' ' -f2 || echo "none")
              DABMUX_CURRENT_SHA=$(gh release view "odr-dabmux-$DABMUX_VER" --json body --jq '.body' 2>/dev/null | grep "Commit:" | cut -d' ' -f2 || echo "none")
              
              # Compare SHAs - if different, we need to rebuild
              [[ "$PADENC_SHA" == "$PADENC_CURRENT_SHA" ]] && PADENC_EXISTS="exists" || PADENC_EXISTS="null"
              [[ "$AUDIOENC_SHA" == "$AUDIOENC_CURRENT_SHA" ]] && AUDIOENC_EXISTS="exists" || AUDIOENC_EXISTS="null"  
              [[ "$DABMUX_SHA" == "$DABMUX_CURRENT_SHA" ]] && DABMUX_EXISTS="exists" || DABMUX_EXISTS="null"
            else
              # For stable builds, just check if release exists
              PADENC_EXISTS=$(gh release view "odr-padenc-$PADENC_VER" --json id --jq '.id' 2>/dev/null || echo "null")
              AUDIOENC_EXISTS=$(gh release view "odr-audioenc-$AUDIOENC_VER" --json id --jq '.id' 2>/dev/null || echo "null")
              DABMUX_EXISTS=$(gh release view "odr-dabmux-$DABMUX_VER" --json id --jq '.id' 2>/dev/null || echo "null")
              [[ "$PADENC_EXISTS" != "null" ]] && PADENC_EXISTS="exists" || PADENC_EXISTS="null"
              [[ "$AUDIOENC_EXISTS" != "null" ]] && AUDIOENC_EXISTS="exists" || AUDIOENC_EXISTS="null"
              [[ "$DABMUX_EXISTS" != "null" ]] && DABMUX_EXISTS="exists" || DABMUX_EXISTS="null"
            fi
          else
            PADENC_EXISTS="null"
            AUDIOENC_EXISTS="null" 
            DABMUX_EXISTS="null"
          fi
          
          # Determine which tools to build based on input AND whether they already exist
          if [[ -z "$TOOLS_INPUT" ]]; then
            # Build all tools, but only if they don't exist yet (or skip_existing is false)
            [[ "$PADENC_EXISTS" == "null" ]] && echo "build-padenc=true" >> "$GITHUB_OUTPUT" || echo "build-padenc=false" >> "$GITHUB_OUTPUT"
            [[ "$AUDIOENC_EXISTS" == "null" ]] && echo "build-audioenc=true" >> "$GITHUB_OUTPUT" || echo "build-audioenc=false" >> "$GITHUB_OUTPUT"
            [[ "$DABMUX_EXISTS" == "null" ]] && echo "build-dabmux=true" >> "$GITHUB_OUTPUT" || echo "build-dabmux=false" >> "$GITHUB_OUTPUT"
          else
            echo "build-padenc=false" >> "$GITHUB_OUTPUT"
            echo "build-audioenc=false" >> "$GITHUB_OUTPUT"
            echo "build-dabmux=false" >> "$GITHUB_OUTPUT"
            
            # Parse tools list and check existence
            IFS=',' read -ra TOOLS <<< "$TOOLS_INPUT"
            for tool in "${TOOLS[@]}"; do
              case "$tool" in
                "padenc") [[ "$PADENC_EXISTS" == "null" ]] && echo "build-padenc=true" >> "$GITHUB_OUTPUT" ;;
                "audioenc") [[ "$AUDIOENC_EXISTS" == "null" ]] && echo "build-audioenc=true" >> "$GITHUB_OUTPUT" ;;
                "dabmux") [[ "$DABMUX_EXISTS" == "null" ]] && echo "build-dabmux=true" >> "$GITHUB_OUTPUT" ;;
              esac
            done
          fi
          
          echo "Release existence check:"
          echo "  PadEnc $PADENC_VER: $([ "$PADENC_EXISTS" != "null" ] && echo "EXISTS" || echo "MISSING")"
          echo "  AudioEnc $AUDIOENC_VER: $([ "$AUDIOENC_EXISTS" != "null" ] && echo "EXISTS" || echo "MISSING")"
          echo "  DabMux $DABMUX_VER: $([ "$DABMUX_EXISTS" != "null" ] && echo "EXISTS" || echo "MISSING")"

  ##################################
  # Build Jobs
  ##################################
  build_padenc:
    name: Build ODR-PadEnc Artifact
    runs-on: ${{ matrix.runner }}
    needs: determine-builds
    if: needs.determine-builds.outputs.build-padenc == 'true'
    container:
      image: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: debian13
            image: "debian:trixie-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: debian13
            image: "debian:trixie-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: ubuntu2404
            image: "ubuntu:24.04"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: ubuntu2404
            image: "ubuntu:24.04"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: alpine322
            image: "alpine:3.22"
            arch: "amd64"
            runner: "ubuntu-24.04"
    steps:
      - name: Set configuration
        run: |
          VERSION="${{ needs.determine-builds.outputs.padenc-version }}"
          
          # For dev builds, use 'next' branch. For stable, use the tag
          if [[ "$VERSION" == "next" ]]; then
            BRANCH="next"
          else
            BRANCH="$VERSION"
          fi
          
          # Export to environment
          {
            echo "VERSION=$VERSION"
            echo "BRANCH=$BRANCH"
            echo "REPO_URL=https://github.com/Opendigitalradio/ODR-PadEnc"
            echo "SOFTWARE=ODR-PadEnc"
          } >> "$GITHUB_ENV"

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "alpine322" ]; then
            apk add --no-cache \
              build-base automake autoconf libtool \
              imagemagick-dev \
              curl git
          else
            apt-get update && apt-get install -y --no-install-recommends \
              build-essential automake libtool \
              libmagickwand-dev \
              ca-certificates curl git && \
            apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          fi

      - name: Download or clone ODR-PadEnc
        run: |
          # Check if BRANCH starts with 'v' (indicating a version tag)
          if [[ "${BRANCH}" =~ ^v[0-9] ]]; then
            echo "Downloading tag ${BRANCH} from ${REPO_URL}"
            curl -L "${REPO_URL}/archive/refs/tags/${BRANCH}.tar.gz" | tar -xz
            mv ODR-PadEnc-* ODR-PadEnc
          else
            echo "Cloning branch ${BRANCH} from ${REPO_URL}"
            git clone --depth 1 --branch "${BRANCH}" "${REPO_URL}.git"
          fi

      - name: Build ODR-PadEnc
        working-directory: ODR-PadEnc
        run: |
          ./bootstrap
          ./configure
          make -j"$(nproc)"

      - name: Prepare output directory
        run: mkdir -p output

      - name: Copy built binary to output directory
        working-directory: ODR-PadEnc
        run: |
          BINARY_NAME="odr-padenc-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ -f odr-padenc ]; then
            cp odr-padenc "../output/$BINARY_NAME"
          elif [ -f src/odr-padenc ]; then
            cp src/odr-padenc "../output/$BINARY_NAME"
          else
            echo "Build failed: executable not found!" && exit 1
          fi

      - name: Upload ODR-PadEnc Artifact
        uses: actions/upload-artifact@v4
        with:
          name: odr-padenc-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}
          path: output/odr-padenc-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}

  build_audioenc:
    name: Build ODR-AudioEnc Artifact
    runs-on: ${{ matrix.runner }}
    needs: determine-builds
    if: needs.determine-builds.outputs.build-audioenc == 'true'
    container:
      image: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: full
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: minimal
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: full
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: minimal
          - os: debian13
            image: "debian:trixie-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: full
          - os: debian13
            image: "debian:trixie-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: minimal
          - os: debian13
            image: "debian:trixie-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: full
          - os: debian13
            image: "debian:trixie-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: minimal
          - os: ubuntu2404
            image: "ubuntu:24.04"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: full
          - os: ubuntu2404
            image: "ubuntu:24.04"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: minimal
          - os: ubuntu2404
            image: "ubuntu:24.04"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: full
          - os: ubuntu2404
            image: "ubuntu:24.04"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            build: minimal
          - os: alpine322
            image: "alpine:3.22"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: minimal
          - os: alpine322
            image: "alpine:3.22"
            arch: "amd64"
            runner: "ubuntu-24.04"
            build: full
    steps:
      - name: Set configuration
        run: |
          VERSION="${{ needs.determine-builds.outputs.audioenc-version }}"
          
          # For dev builds, use 'next' branch. For stable, use the tag
          if [[ "$VERSION" == "next" ]]; then
            BRANCH="next"
          else
            BRANCH="$VERSION"
          fi
          
          # Export to environment
          {
            echo "VERSION=$VERSION"
            echo "BRANCH=$BRANCH"
            echo "REPO_URL=https://github.com/Opendigitalradio/ODR-AudioEnc"
            echo "SOFTWARE=ODR-AudioEnc"
          } >> "$GITHUB_ENV"

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "alpine322" ]; then
            # Enable community repository
            echo "https://dl-cdn.alpinelinux.org/alpine/v3.22/community" >> /etc/apk/repositories
            apk update
            apk add --no-cache \
              build-base automake autoconf libtool \
              zeromq-dev \
              alsa-lib-dev jack-dev vlc-dev \
              gstreamer-dev gst-plugins-base-dev \
              curl-dev curl git
          else
            apt-get update && apt-get install -y --no-install-recommends \
              build-essential automake libtool \
              libzmq3-dev libzmq5 \
              libasound2-dev libjack-jackd2-dev libvlc-dev \
              libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
              libcurl4-openssl-dev ca-certificates curl git && \
            apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          fi

      - name: Download or clone ODR-AudioEnc
        run: |
          # Check if BRANCH starts with 'v' (indicating a version tag)
          if [[ "${BRANCH}" =~ ^v[0-9] ]]; then
            echo "Downloading tag ${BRANCH} from ${REPO_URL}"
            curl -L "${REPO_URL}/archive/refs/tags/${BRANCH}.tar.gz" | tar -xz
            mv ODR-AudioEnc-* ODR-AudioEnc
          else
            echo "Cloning branch ${BRANCH} from ${REPO_URL}"
            git clone --depth 1 --branch "${BRANCH}" "${REPO_URL}.git"
          fi

      - name: Build ODR-AudioEnc
        working-directory: ODR-AudioEnc
        run: |
          ./bootstrap
          if [ "${{ matrix.build }}" = "full" ]; then
            ./configure --enable-alsa --enable-jack --enable-vlc --enable-gst
          else
            ./configure
          fi
          make -j"$(nproc)"

      - name: Prepare output directory
        run: mkdir -p output

      - name: Copy built binary to output directory
        working-directory: ODR-AudioEnc
        run: |
          BINARY_NAME="odr-audioenc-${{ env.VERSION }}-${{ matrix.build }}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ -f odr-audioenc ]; then
            cp odr-audioenc "../output/$BINARY_NAME"
          elif [ -f src/odr-audioenc ]; then
            cp src/odr-audioenc "../output/$BINARY_NAME"
          else
            echo "Build failed: executable not found!" && exit 1
          fi

      - name: Upload ODR-AudioEnc Artifact
        uses: actions/upload-artifact@v4
        with:
          name: odr-audioenc-${{ env.VERSION }}-${{ matrix.build }}-${{ matrix.os }}-${{ matrix.arch }}
          path: output/odr-audioenc-${{ env.VERSION }}-${{ matrix.build }}-${{ matrix.os }}-${{ matrix.arch }}

  build_dabmux:
    name: Build ODR-DabMux Artifact
    runs-on: ${{ matrix.runner }}
    needs: determine-builds
    if: needs.determine-builds.outputs.build-dabmux == 'true'
    container:
      image: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: debian12
            image: "debian:bookworm-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: debian13
            image: "debian:trixie-slim"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: debian13
            image: "debian:trixie-slim"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: ubuntu2404
            image: "ubuntu:24.04"
            arch: "amd64"
            runner: "ubuntu-24.04"
          - os: ubuntu2404
            image: "ubuntu:24.04"
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
          - os: alpine322
            image: "alpine:3.22"
            arch: "amd64"
            runner: "ubuntu-24.04"
    steps:
      - name: Set configuration
        run: |
          VERSION="${{ needs.determine-builds.outputs.dabmux-version }}"
          
          # For dev builds, use 'next' branch. For stable, use the tag
          if [[ "$VERSION" == "next" ]]; then
            BRANCH="next"
          else
            BRANCH="$VERSION"
          fi
          
          # Export to environment
          {
            echo "VERSION=$VERSION"
            echo "BRANCH=$BRANCH"
            echo "REPO_URL=https://github.com/Opendigitalradio/ODR-DabMux"
            echo "SOFTWARE=ODR-DabMux"
          } >> "$GITHUB_ENV"

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "alpine322" ]; then
            apk add --no-cache \
              build-base automake autoconf libtool \
              zeromq-dev \
              boost-dev \
              curl-dev curl git
          else
            apt-get update && apt-get install -y --no-install-recommends \
              build-essential automake libtool \
              libzmq3-dev libzmq5 \
              libboost-system-dev \
              libcurl4-openssl-dev ca-certificates curl git && \
            apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          fi

      - name: Download or clone ODR-DabMux
        run: |
          # Check if BRANCH starts with 'v' (indicating a version tag)
          if [[ "${BRANCH}" =~ ^v[0-9] ]]; then
            echo "Downloading tag ${BRANCH} from ${REPO_URL}"
            curl -L "${REPO_URL}/archive/refs/tags/${BRANCH}.tar.gz" | tar -xz
            mv ODR-DabMux-* ODR-DabMux
          else
            echo "Cloning branch ${BRANCH} from ${REPO_URL}"
            git clone --depth 1 --branch "${BRANCH}" "${REPO_URL}.git"
          fi

      - name: Build ODR-DabMux
        working-directory: ODR-DabMux
        run: |
          ./bootstrap.sh
          ./configure
          make -j"$(nproc)"

      - name: Prepare output directory
        run: mkdir -p output

      - name: Copy built binary to output directory
        working-directory: ODR-DabMux
        run: |
          BINARY_NAME="odr-dabmux-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ -f odr-dabmux ]; then
            cp odr-dabmux "../output/$BINARY_NAME"
          elif [ -f src/odr-dabmux ]; then
            cp src/odr-dabmux "../output/$BINARY_NAME"
          else
            echo "Build failed: executable not found!" && exit 1
          fi

      - name: Upload ODR-DabMux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: odr-dabmux-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}
          path: output/odr-dabmux-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}

  ##################################
  # Release Jobs
  ##################################
  release_padenc:
    name: Create GitHub Release for ODR-PadEnc
    runs-on: ubuntu-24.04
    needs: [determine-builds, build_padenc]
    if: needs.determine-builds.outputs.build-padenc == 'true'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Load version
        run: |
          # Source build.env file
          set -a
          . ./build.env
          set +a

          echo "VERSION=${{ needs.determine-builds.outputs.padenc-version }}" >> "$GITHUB_ENV"

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: all_artifacts

      - name: Organize PadEnc artifacts
        run: |
          mkdir -p padenc
          mv all_artifacts/odr-padenc-* padenc/ || true
          ls -l padenc

      - name: Create PadEnc Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          files: padenc/**
          tag_name: odr-padenc-${{ env.VERSION }}
          name: "ODR-PadEnc ${{ env.VERSION }}"
          generate_release_notes: false

  release_audioenc:
    name: Create GitHub Release for ODR-AudioEnc
    runs-on: ubuntu-24.04
    needs: [determine-builds, build_audioenc]
    if: needs.determine-builds.outputs.build-audioenc == 'true'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set version
        run: |
          echo "VERSION=${{ needs.determine-builds.outputs.audioenc-version }}" >> "$GITHUB_ENV"

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: all_artifacts

      - name: Organize AudioEnc artifacts
        run: |
          mkdir -p audioenc
          mv all_artifacts/odr-audioenc-* audioenc/ || true
          ls -l audioenc

      - name: Create AudioEnc Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          files: audioenc/**
          tag_name: odr-audioenc-${{ env.VERSION }}
          name: "ODR-AudioEnc ${{ env.VERSION }}"
          generate_release_notes: false

  release_dabmux:
    name: Create GitHub Release for ODR-DabMux
    runs-on: ubuntu-24.04
    needs: [determine-builds, build_dabmux]
    if: needs.determine-builds.outputs.build-dabmux == 'true'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Load version
        run: |
          echo "VERSION=${{ needs.determine-builds.outputs.dabmux-version }}" >> "$GITHUB_ENV"

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: all_artifacts

      - name: Organize DabMux artifacts
        run: |
          mkdir -p dabmux
          mv all_artifacts/odr-dabmux-* dabmux/ || true
          ls -l dabmux

      - name: Create DabMux Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          files: dabmux/**
          tag_name: odr-dabmux-${{ env.VERSION }}
          name: "ODR-DabMux ${{ env.VERSION }}"
          generate_release_notes: false
